// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "/home/anthony/ClemsonVibrationResearch/obdgpslogger/build/src/gui/convertwindow.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <FL/Fl.H>
#include <FL/Fl_File_Chooser.H>

void obdconvertwindow::cb_Google_i(Fl_Menu_*, void*) {
  mConvertType = CONVERT_KML;
}
void obdconvertwindow::cb_Google(Fl_Menu_* o, void* v) {
  ((obdconvertwindow*)(o->parent()->parent()->user_data()))->cb_Google_i(o,v);
}

void obdconvertwindow::cb_CSV_i(Fl_Menu_*, void*) {
  mConvertType = CONVERT_CSV;
}
void obdconvertwindow::cb_CSV(Fl_Menu_* o, void* v) {
  ((obdconvertwindow*)(o->parent()->parent()->user_data()))->cb_CSV_i(o,v);
}

Fl_Menu_Item obdconvertwindow::menu_convertchoice[] = {
 {"Google Earth (.kml)", 0,  (Fl_Callback*)obdconvertwindow::cb_Google, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"CSV (.csv)", 0,  (Fl_Callback*)obdconvertwindow::cb_CSV, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void obdconvertwindow::cb_convertbutton_i(Fl_Button*, void*) {
  convert();
}
void obdconvertwindow::cb_convertbutton(Fl_Button* o, void* v) {
  ((obdconvertwindow*)(o->parent()->parent()->user_data()))->cb_convertbutton_i(o,v);
}

void obdconvertwindow::cb_donebutton_i(Fl_Button*, void*) {
  window->hide();
}
void obdconvertwindow::cb_donebutton(Fl_Button* o, void* v) {
  ((obdconvertwindow*)(o->parent()->parent()->user_data()))->cb_donebutton_i(o,v);
}

void obdconvertwindow::cb_logchooser_i(Fl_Button*, void*) {
  Fl_File_Chooser f(mMainui->getLogfilename(),
  "OBDGPS Logfiles (*.db)\tAll Files (*)",
  Fl_File_Chooser::SINGLE, "Choose OBD GPS Logfile" );
f.show();
while(f.shown()) {
  Fl::check();
}
if(0 < f.count())
  logfilename->value(f.value());
}
void obdconvertwindow::cb_logchooser(Fl_Button* o, void* v) {
  ((obdconvertwindow*)(o->parent()->user_data()))->cb_logchooser_i(o,v);
}

void obdconvertwindow::cb_outchooser_i(Fl_Button*, void*) {
  Fl_File_Chooser f(".",
  "Google Earth (*.kml)\tCSV (*.csv)\tAll Files (*)",
  Fl_File_Chooser::CREATE, "Choose Output Logfile" );
f.show();
while(f.shown()) {
  Fl::check();
}
if(0 < f.count())
  outputfilename->value(f.value());
}
void obdconvertwindow::cb_outchooser(Fl_Button* o, void* v) {
  ((obdconvertwindow*)(o->parent()->user_data()))->cb_outchooser_i(o,v);
}

obdconvertwindow::obdconvertwindow(OBDUI *obdui) {
  mConvertType = CONVERT_KML;
  { Fl_Double_Window* o = window = new Fl_Double_Window(555, 195, "Convert OBD Log...");
    window->user_data((void*)(this));
    { allcontrols = new Fl_Group(95, 10, 310, 135);
      { Fl_File_Input* o = logfilename = new Fl_File_Input(95, 10, 310, 30, "Log File");
        o->value(obdui->getLogfilename());
      } // Fl_File_Input* logfilename
      { Fl_File_Input* o = outputfilename = new Fl_File_Input(95, 45, 310, 30, "Output File");
        o->value("./obdlogger.kml");
      } // Fl_File_Input* outputfilename
      { convertchoice = new Fl_Choice(95, 85, 310, 25, "Convert to...");
        convertchoice->down_box(FL_BORDER_BOX);
        convertchoice->menu(menu_convertchoice);
      } // Fl_Choice* convertchoice
      { convertbutton = new Fl_Button(180, 120, 105, 25, "Convert");
        convertbutton->callback((Fl_Callback*)cb_convertbutton);
      } // Fl_Button* convertbutton
      { donebutton = new Fl_Button(295, 120, 105, 25, "Done");
        donebutton->callback((Fl_Callback*)cb_donebutton);
      } // Fl_Button* donebutton
      allcontrols->end();
    } // Fl_Group* allcontrols
    { Fl_Progress* o = progressbar = new Fl_Progress(25, 160, 510, 25, "Conversion Progress");
      progressbar->selection_color((Fl_Color)138);
      o->value(0);
    } // Fl_Progress* progressbar
    { logchooser = new Fl_Button(415, 10, 120, 30, "Choose...");
      logchooser->callback((Fl_Callback*)cb_logchooser);
    } // Fl_Button* logchooser
    { outchooser = new Fl_Button(415, 45, 120, 30, "Choose...");
      outchooser->callback((Fl_Callback*)cb_outchooser);
    } // Fl_Button* outchooser
    o->set_modal();
    o->hide();
    window->end();
  } // Fl_Double_Window* window
  mMainui = obdui;
}

void obdconvertwindow::show() {
  window->show();
}

void obdconvertwindow::hide() {
  window->hide();
}

void obdconvertwindow::convert() {
  FILE *p;
  float progresspercentage;
  char line[255];
  char cmd[1024] = "\0";
  
  allcontrols->deactivate();
  
  switch(mConvertType) {
    case CONVERT_KML:
      //printf("Converting to KML\n");
      snprintf(cmd, sizeof(cmd), "obd2kml -p -d %s -o %s",
        mMainui->getLogfilename(), outputfilename->value());
      break;
    case CONVERT_CSV:
      //printf("Converting to CSV\n");
      snprintf(cmd, sizeof(cmd), "obd2csv -p -d %s -o %s",
        mMainui->getLogfilename(), outputfilename->value());
      break;
    default:
      //printf("Not converting anything\n");
      break;
  }
  
  if(0 < strlen(cmd) && NULL == (p = popen(cmd, "r"))) {
    perror(cmd);
  } else {
    while(NULL != fgets(line, sizeof(line), p)) {
      if(0 < sscanf(line, "%f", &progresspercentage)) {
        progressbar->value(progresspercentage);
        Fl::check();
      }
    }
    progressbar->value(100); // Because the conversion tools may not be 100% accurate
    pclose(p);
  }
  
  allcontrols->activate();
}
