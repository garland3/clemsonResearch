// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef maindisplay_h
#define maindisplay_h
#include <FL/Fl.H>
#include "obdconfigfile.h"
#include "logwindow.h"
#include "loggerhandler.h"
#include "gpsdwizard.h"
class obdconvertwindow;
#include "obdgui.h"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Dial.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Input_Choice.H>
#include <FL/Fl_File_Input.H>
#include <FL/Fl_Button.H>

class OBDUI {
public:
  OBDUI();
private:
  Fl_Double_Window *MainWindow;
  Fl_Group *alldials_group;
  Fl_Group *vss_group;
  Fl_Dial *vss_dial;
  Fl_Value_Output *vss_value;
  Fl_Group *throttlepos_group;
  Fl_Dial *throttlepos_dial;
  Fl_Value_Output *throttlepos_value;
  Fl_Group *rpm_group;
  Fl_Dial *rpm_dial;
  Fl_Value_Output *rpm_value;
  Fl_Group *temp_group;
  Fl_Dial *temp_dial;
  Fl_Value_Output *temp_value;
  Fl_Group *maf_group;
  Fl_Dial *maf_dial;
  Fl_Value_Output *maf_value;
  Fl_Value_Output *gpslat;
  Fl_Value_Output *gpslon;
  Fl_Value_Output *gpsalt;
  Fl_Menu_Bar *menubar;
  static Fl_Menu_Item menu_menubar[];
  void cb_Quit_i(Fl_Menu_*, void*);
  static void cb_Quit(Fl_Menu_*, void*);
  void cb_Raw_i(Fl_Menu_*, void*);
  static void cb_Raw(Fl_Menu_*, void*);
  Fl_Group *loggeroptions;
public:
  Fl_Input_Choice *serialfilename;
private:
  Fl_File_Input *logfilename;
  Fl_Button *logchoosebutton;
  void cb_logchoosebutton_i(Fl_Button*, void*);
  static void cb_logchoosebutton(Fl_Button*, void*);
  Fl_Button *serialchoosebutton;
  void cb_serialchoosebutton_i(Fl_Button*, void*);
  static void cb_serialchoosebutton(Fl_Button*, void*);
  Fl_Button *gobutton;
  void cb_gobutton_i(Fl_Button*, void*);
  static void cb_gobutton(Fl_Button*, void*);
  Fl_Button *starttripbutton;
  void cb_starttripbutton_i(Fl_Button*, void*);
  static void cb_starttripbutton(Fl_Button*, void*);
  Fl_Button *endtripbutton;
  void cb_endtripbutton_i(Fl_Button*, void*);
  static void cb_endtripbutton(Fl_Button*, void*);
  Fl_Button *convertbutton;
  void cb_convertbutton_i(Fl_Button*, void*);
  static void cb_convertbutton(Fl_Button*, void*);
  Fl_Button *gpsdwizardbutton;
  void cb_gpsdwizardbutton_i(Fl_Button*, void*);
  static void cb_gpsdwizardbutton(Fl_Button*, void*);
public:
  ~OBDUI();
  void setUIRunning(enum ui_state newstate, enum trip_state tripstate = TRIP_NONE);
  loggerhandler * getOBDHandler();
  void show(int argc, char **argv);
  const char * getLogfilename();
  const char * getSerialfilename();
  void checkLogger();
  void append_stderr_log(const char *text);
  void append_stdout_log(const char *text);
private:
  loggerhandler *mLH; 
  enum ui_state mUIState; 
  enum trip_state mTripState; 
  OBDLogWindow *mLogWindow; 
  obdconvertwindow *mConvertWindow; 
  GPSDWizardWindow *mGpsdWindow; 
public:
  struct OBDGPSConfig *configfile;
  void reset_dials();
  void setvss(float val);
  void setrpm(float val);
  void setmaf(float val);
  void setthrottlepos(float val);
  void settemp(float val);
  void setgps(float lat, float lon, float alt);
};
#endif
