// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "/home/anthony/clemsonResearch/obdgpslogger/build/src/gui/maindisplay.h"
#include <stdio.h>
#include <unistd.h>
#include <FL/Fl.H>
#include <FL/Fl_File_Chooser.H>
#include "obdconfig.h"
#include "obdservicecommands.h"
#include "guessdevs.h"
#include "convertwindow.h"
// Button "state machine":
// 1) Execution begins.
//     Go button active
//     start and end inactive
// 2) Click "Go"
//     Go button changes to "starting...", inactive
//     start and end still inactive
// 3) Once logger is running
//     Change go button to "Stop", active
//     make start active. end still inactive
// 4a) Clicking start
//      make start inactive, end active
// 4b) Clicking end
//      make start active, end inactive
// 5) Click "Stop"

void OBDUI::cb_Quit_i(Fl_Menu_*, void*) {
  MainWindow->hide();
mLogWindow->hide();
}
void OBDUI::cb_Quit(Fl_Menu_* o, void* v) {
  ((OBDUI*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void OBDUI::cb_Raw_i(Fl_Menu_*, void*) {
  mLogWindow->show();
}
void OBDUI::cb_Raw(Fl_Menu_* o, void* v) {
  ((OBDUI*)(o->parent()->user_data()))->cb_Raw_i(o,v);
}

Fl_Menu_Item OBDUI::menu_menubar[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Quit", 0,  (Fl_Callback*)OBDUI::cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Window", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Raw Output", 0,  (Fl_Callback*)OBDUI::cb_Raw, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void OBDUI::cb_logchoosebutton_i(Fl_Button*, void*) {
  Fl_File_Chooser f(logfilename->value(),
  "OBDGPS Logfiles (*.db)\tAll Files (*)",
  Fl_File_Chooser::CREATE, "Choose OBD GPS Logfile" );
f.show();
while(f.shown()) {
  Fl::check();
}
if(0 < f.count())
  logfilename->value(f.value());
}
void OBDUI::cb_logchoosebutton(Fl_Button* o, void* v) {
  ((OBDUI*)(o->parent()->parent()->user_data()))->cb_logchoosebutton_i(o,v);
}

void OBDUI::cb_serialchoosebutton_i(Fl_Button*, void*) {
  Fl_File_Chooser f("/dev/",
  "All Files (*)",
  Fl_File_Chooser::SINGLE, "Choose Serial Port" );
f.show();
while(f.shown()) {
  Fl::check();
}
if(0 < f.count())
  serialfilename->value(f.value());
}
void OBDUI::cb_serialchoosebutton(Fl_Button* o, void* v) {
  ((OBDUI*)(o->parent()->parent()->user_data()))->cb_serialchoosebutton_i(o,v);
}

void OBDUI::cb_gobutton_i(Fl_Button*, void*) {
  if(mLH) {
  if(TRIP_STOPPED != mTripState) {
    mLH->endtrip();
    sleep(1);
  }
  delete mLH;
  mLH = NULL;
  setUIRunning(UI_STOPPED);
} else {
  mLH = new loggerhandler(this);
  setUIRunning(UI_STARTING);
};
}
void OBDUI::cb_gobutton(Fl_Button* o, void* v) {
  ((OBDUI*)(o->parent()->user_data()))->cb_gobutton_i(o,v);
}

void OBDUI::cb_starttripbutton_i(Fl_Button*, void*) {
  if(mLH) {
  mLH->starttrip();
  setUIRunning(UI_STARTED, TRIP_STARTED);
};
}
void OBDUI::cb_starttripbutton(Fl_Button* o, void* v) {
  ((OBDUI*)(o->parent()->user_data()))->cb_starttripbutton_i(o,v);
}

void OBDUI::cb_endtripbutton_i(Fl_Button*, void*) {
  if(mLH) {
  mLH->endtrip();
  setUIRunning(UI_STARTED, TRIP_STOPPED);
};
}
void OBDUI::cb_endtripbutton(Fl_Button* o, void* v) {
  ((OBDUI*)(o->parent()->user_data()))->cb_endtripbutton_i(o,v);
}

void OBDUI::cb_convertbutton_i(Fl_Button*, void*) {
  mConvertWindow->show();
}
void OBDUI::cb_convertbutton(Fl_Button* o, void* v) {
  ((OBDUI*)(o->parent()->user_data()))->cb_convertbutton_i(o,v);
}

void OBDUI::cb_gpsdwizardbutton_i(Fl_Button*, void*) {
  mGpsdWindow->show();
}
void OBDUI::cb_gpsdwizardbutton(Fl_Button* o, void* v) {
  ((OBDUI*)(o->parent()->user_data()))->cb_gpsdwizardbutton_i(o,v);
}

OBDUI::OBDUI() {
  mLH = NULL;
  configfile = obd_loadConfig(0);
  { MainWindow = new Fl_Double_Window(545, 390, "OBD GPS Logger");
    MainWindow->user_data((void*)(this));
    MainWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    { alldials_group = new Fl_Group(25, 150, 495, 215);
      alldials_group->deactivate();
      { vss_group = new Fl_Group(25, 150, 145, 85);
        { Fl_Dial* o = vss_dial = new Fl_Dial(25, 150, 145, 85, "Vehicle Speed");
          vss_dial->type(1);
          struct obdservicecmd *osc = obdGetCmdForColumn("vss");
          if(NULL == osc) o->range(0,200);
          else o->range(osc->min_value,osc->max_value);
        } // Fl_Dial* vss_dial
        { vss_value = new Fl_Value_Output(75, 206, 45, 24);
        } // Fl_Value_Output* vss_value
        vss_group->end();
      } // Fl_Group* vss_group
      { throttlepos_group = new Fl_Group(25, 260, 145, 85);
        { Fl_Dial* o = throttlepos_dial = new Fl_Dial(25, 260, 145, 85, "Throttle Position");
          throttlepos_dial->type(1);
          struct obdservicecmd *osc = obdGetCmdForColumn("throttle");
          if(NULL == osc) o->range(0,200);
          else o->range(osc->min_value,osc->max_value);
        } // Fl_Dial* throttlepos_dial
        { throttlepos_value = new Fl_Value_Output(75, 316, 45, 24);
        } // Fl_Value_Output* throttlepos_value
        throttlepos_group->end();
      } // Fl_Group* throttlepos_group
      { rpm_group = new Fl_Group(200, 150, 145, 85);
        { Fl_Dial* o = rpm_dial = new Fl_Dial(200, 150, 145, 85, "Engine RPM");
          rpm_dial->type(1);
          struct obdservicecmd *osc = obdGetCmdForColumn("rpm");
          if(NULL == osc) o->range(0,7000);
          else o->range(osc->min_value,osc->max_value);
        } // Fl_Dial* rpm_dial
        { rpm_value = new Fl_Value_Output(250, 206, 45, 24);
        } // Fl_Value_Output* rpm_value
        rpm_group->end();
      } // Fl_Group* rpm_group
      { temp_group = new Fl_Group(200, 260, 145, 85);
        { Fl_Dial* o = temp_dial = new Fl_Dial(200, 260, 145, 85, "Oil Temperature");
          temp_dial->type(1);
          struct obdservicecmd *osc = obdGetCmdForColumn("temp");
          if(NULL == osc) o->range(0,200);
          else o->range(osc->min_value,osc->max_value);
        } // Fl_Dial* temp_dial
        { temp_value = new Fl_Value_Output(250, 316, 45, 24);
        } // Fl_Value_Output* temp_value
        temp_group->end();
      } // Fl_Group* temp_group
      { maf_group = new Fl_Group(375, 150, 145, 85);
        { Fl_Dial* o = maf_dial = new Fl_Dial(375, 150, 145, 85, "Mass Airflow");
          maf_dial->type(1);
          struct obdservicecmd *osc = obdGetCmdForColumn("maf");
          if(NULL == osc) o->range(0,2000);
          else o->range(osc->min_value,osc->max_value);
        } // Fl_Dial* maf_dial
        { maf_value = new Fl_Value_Output(425, 206, 45, 24);
        } // Fl_Value_Output* maf_value
        maf_group->end();
      } // Fl_Group* maf_group
      { Fl_Group* o = new Fl_Group(410, 281, 105, 84, "GPS Position");
        { gpslat = new Fl_Value_Output(410, 281, 105, 24, "Latitude");
        } // Fl_Value_Output* gpslat
        { gpslon = new Fl_Value_Output(410, 311, 105, 24, "Longitude");
        } // Fl_Value_Output* gpslon
        { gpsalt = new Fl_Value_Output(410, 341, 105, 24, "Altitude");
        } // Fl_Value_Output* gpsalt
        o->end();
      } // Fl_Group* o
      alldials_group->end();
    } // Fl_Group* alldials_group
    { menubar = new Fl_Menu_Bar(0, 0, 600, 20);
      menubar->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      menubar->menu(menu_menubar);
    } // Fl_Menu_Bar* menubar
    { loggeroptions = new Fl_Group(15, 20, 505, 115);
      { serialfilename = new Fl_Input_Choice(115, 62, 300, 26, "OBD Device");
      } // Fl_Input_Choice* serialfilename
      { logfilename = new Fl_File_Input(115, 25, 300, 30, "Logfile");
        logfilename->when(FL_WHEN_NEVER);
        logfilename->value(OBD_DEFAULT_DATABASE);
      } // Fl_File_Input* logfilename
      { logchoosebutton = new Fl_Button(420, 25, 95, 30, "Choose...");
        logchoosebutton->callback((Fl_Callback*)cb_logchoosebutton);
      } // Fl_Button* logchoosebutton
      { serialchoosebutton = new Fl_Button(420, 60, 95, 30, "Choose...");
        serialchoosebutton->callback((Fl_Callback*)cb_serialchoosebutton);
      } // Fl_Button* serialchoosebutton
      loggeroptions->end();
    } // Fl_Group* loggeroptions
    { gobutton = new Fl_Button(55, 95, 120, 45, "Go");
      gobutton->callback((Fl_Callback*)cb_gobutton);
      Fl_Group::current()->resizable(gobutton);
    } // Fl_Button* gobutton
    { starttripbutton = new Fl_Button(180, 95, 115, 20, "Start Trip");
      starttripbutton->callback((Fl_Callback*)cb_starttripbutton);
      starttripbutton->hide();
      starttripbutton->deactivate();
    } // Fl_Button* starttripbutton
    { endtripbutton = new Fl_Button(180, 120, 115, 20, "End Trip");
      endtripbutton->callback((Fl_Callback*)cb_endtripbutton);
      endtripbutton->hide();
      endtripbutton->deactivate();
    } // Fl_Button* endtripbutton
    { convertbutton = new Fl_Button(360, 110, 155, 25, "Convert log  to ...");
      convertbutton->callback((Fl_Callback*)cb_convertbutton);
    } // Fl_Button* convertbutton
    { gpsdwizardbutton = new Fl_Button(190, 110, 160, 25, "GPSD Launch Wizard");
      gpsdwizardbutton->callback((Fl_Callback*)cb_gpsdwizardbutton);
    } // Fl_Button* gpsdwizardbutton
    MainWindow->end();
  } // Fl_Double_Window* MainWindow
  setUIRunning(UI_STOPPED);
  mLogWindow = new OBDLogWindow();
  mLogWindow->hide();
  mConvertWindow = new obdconvertwindow(this);
  mConvertWindow->hide();
  // mLogWindow->append_stdout("Cookies out");
  // mLogWindow->append_stderr("Cookies err");
  reset_dials();
  mGpsdWindow = new GPSDWizardWindow();
  mGpsdWindow->hide();
  populateSerialDevs(serialfilename, NULL==configfile?OBD_DEFAULT_SERIALPORT:configfile->obd_device);
}

OBDUI::~OBDUI() {
  if(NULL != mLH) {
    delete mLH;
    mLH = NULL;
  }
  delete mLogWindow;
  delete mConvertWindow;
  delete mGpsdWindow;
  
  obd_freeConfig(configfile);
}

void OBDUI::setUIRunning(enum ui_state newstate, enum trip_state tripstate ) {
  mUIState = newstate;
  mTripState = tripstate;
  
  switch(newstate) {
    case UI_STOPPED:
      gobutton->activate();
      gobutton->copy_label("Go");
      loggeroptions->activate();
      convertbutton->activate();
      gpsdwizardbutton->activate();
      reset_dials();
      alldials_group->deactivate();
      break;
    case UI_STARTING:
      gobutton->deactivate();
      gobutton->copy_label("Starting...");
      loggeroptions->deactivate();
      convertbutton->deactivate();
      gpsdwizardbutton->deactivate();
      alldials_group->deactivate();
      break;
    case UI_STARTED:
      gobutton->activate();
      gobutton->copy_label("Stop");
      loggeroptions->deactivate();
      convertbutton->deactivate();
      gpsdwizardbutton->deactivate();
      alldials_group->activate();
      break;
  }
  
  switch(tripstate) {
    case TRIP_STOPPED:
      starttripbutton->activate();
      endtripbutton->deactivate();
      break;
    case TRIP_STARTED:
      starttripbutton->deactivate();
      endtripbutton->activate();
      break;
    case TRIP_NONE:
      starttripbutton->deactivate();
      endtripbutton->deactivate();
      break;
  }
}

loggerhandler * OBDUI::getOBDHandler() {
  return mLH;
}

void OBDUI::show(int argc, char **argv) {
  MainWindow->show(argc,argv);
}

const char * OBDUI::getLogfilename() {
  return logfilename->value();
}

const char * OBDUI::getSerialfilename() {
  return serialfilename->value();
}

void OBDUI::checkLogger() {
  if(NULL != mLH) {
    mLH->checkRunning(false);
  
    if(!mLH->isUsable()) {
      delete mLH;
      mLH = NULL;
    }
  }
  
  if(NULL == mLH) {
    setUIRunning(UI_STOPPED);
  } else {
    mLH->pulse();
    if(mLH->isStarted()) {
      if(mUIState == UI_STARTING) {
        setUIRunning(UI_STARTED, TRIP_STOPPED);
      }
    }
  }
}

void OBDUI::append_stderr_log(const char *text) {
  mLogWindow->append_stderr(text);
}

void OBDUI::append_stdout_log(const char *text) {
  mLogWindow->append_stdout(text);
}

void OBDUI::reset_dials() {
  setvss(vss_dial->minimum());
  setrpm(rpm_dial->minimum());
  setmaf(maf_dial->minimum());
  setthrottlepos(throttlepos_dial->minimum());
  settemp(temp_dial->minimum());
  setgps(0,0,0);
}

void OBDUI::setvss(float val) {
  vss_dial->value(val);
  vss_value->value(val);
}

void OBDUI::setrpm(float val) {
  rpm_dial->value(val);
  rpm_value->value(val);
}

void OBDUI::setmaf(float val) {
  maf_dial->value(val);
  maf_value->value(val);
}

void OBDUI::setthrottlepos(float val) {
  throttlepos_dial->value(val);
  throttlepos_value->value(val);
}

void OBDUI::settemp(float val) {
  temp_dial->value(val);
  temp_value->value(val);
}

void OBDUI::setgps(float lat, float lon, float alt) {
  gpslat->value(lat);
  gpslon->value(lon);
  gpsalt->value(alt);
}
